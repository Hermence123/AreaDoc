{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"AreaDEvops/","text":"GENERAL INFORMATION Language: React native, Node.js, React Compilation: docker-compose build && docker-compose up GENERAL ENVIRONMENT Technical environment : Web application. Mobile application. Api web. Functional environment : Trello project management. Hosting Github. Documentation Mkdocs. TECHNICAL GRAPHICS Front back Test GRAPHIC DATABASE INSTALLATION Prerequisites Docker Step 1: Install docker-compose here Step 2: Build project images : $ docker-compose build Run Project : $ docker-compose up Go for Web application $ localhost:8081 Can get apk with this url $ localhost:8081/client.apk Launch AREA Getting Started with Create React App This project was bootstrapped with Create React App . Available Scripts In the project directory, you can run: npm start Runs the app in the development mode.\\ Open http://localhost:3000 to view it in your browser. The page will reload when you make changes.\\ You may also see any lint errors in the console. npm test Launches the test runner in the interactive watch mode.\\ See the section about running tests for more information. npm run build Builds the app for production to the build folder.\\ It correctly bundles React in production mode and optimizes the build for the best performance. The build is minified and the filenames include the hashes.\\ Your app is ready to be deployed! See the section about deployment for more information. npm run eject Note: this is a one-way operation. Once you eject , you can't go back! * If you aren't satisfied with the build tool and configuration choices, you can eject at any time. This command will remove the single build dependency from your project. Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except eject will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own. You don't have to ever use eject . The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it. Learn More You can learn more in the Create React App documentation . To learn React, check out the React documentation . Code Splitting This section has moved here: https://facebook.github.io/create-react-app/docs/code-splitting Analyzing the Bundle Size This section has moved here: https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size Making a Progressive Web App This section has moved here: https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app Advanced Configuration This section has moved here: https://facebook.github.io/create-react-app/docs/advanced-configuration Deployment This section has moved here: https://facebook.github.io/create-react-app/docs/deployment npm run build fails to minify This section has moved here: https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify","title":"AreaDEvops"},{"location":"AreaDEvops/#general-information","text":"Language: React native, Node.js, React Compilation: docker-compose build && docker-compose up","title":"GENERAL INFORMATION"},{"location":"AreaDEvops/#general-environment","text":"","title":"GENERAL ENVIRONMENT"},{"location":"AreaDEvops/#technical-environment","text":"Web application. Mobile application. Api web.","title":"Technical environment :"},{"location":"AreaDEvops/#functional-environment","text":"Trello project management. Hosting Github. Documentation Mkdocs.","title":"Functional environment :"},{"location":"AreaDEvops/#technical-graphics","text":"","title":"TECHNICAL GRAPHICS"},{"location":"AreaDEvops/#front","text":"","title":"Front"},{"location":"AreaDEvops/#back","text":"","title":"back"},{"location":"AreaDEvops/#test","text":"","title":"Test"},{"location":"AreaDEvops/#graphic-database","text":"","title":"GRAPHIC DATABASE"},{"location":"AreaDEvops/#installation","text":"","title":"INSTALLATION"},{"location":"AreaDEvops/#prerequisites","text":"Docker","title":"Prerequisites"},{"location":"AreaDEvops/#step-1","text":"Install docker-compose here","title":"Step 1:"},{"location":"AreaDEvops/#step-2","text":"Build project images : $ docker-compose build Run Project : $ docker-compose up Go for Web application $ localhost:8081 Can get apk with this url $ localhost:8081/client.apk Launch AREA","title":"Step 2:"},{"location":"AreaDEvops/#getting-started-with-create-react-app","text":"This project was bootstrapped with Create React App .","title":"Getting Started with Create React App"},{"location":"AreaDEvops/#available-scripts","text":"In the project directory, you can run:","title":"Available Scripts"},{"location":"AreaDEvops/#npm-start","text":"Runs the app in the development mode.\\ Open http://localhost:3000 to view it in your browser. The page will reload when you make changes.\\ You may also see any lint errors in the console.","title":"npm start"},{"location":"AreaDEvops/#npm-test","text":"Launches the test runner in the interactive watch mode.\\ See the section about running tests for more information.","title":"npm test"},{"location":"AreaDEvops/#npm-run-build","text":"Builds the app for production to the build folder.\\ It correctly bundles React in production mode and optimizes the build for the best performance. The build is minified and the filenames include the hashes.\\ Your app is ready to be deployed! See the section about deployment for more information.","title":"npm run build"},{"location":"AreaDEvops/#npm-run-eject","text":"Note: this is a one-way operation. Once you eject , you can't go back! * If you aren't satisfied with the build tool and configuration choices, you can eject at any time. This command will remove the single build dependency from your project. Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except eject will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own. You don't have to ever use eject . The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.","title":"npm run eject"},{"location":"AreaDEvops/#learn-more","text":"You can learn more in the Create React App documentation . To learn React, check out the React documentation .","title":"Learn More"},{"location":"AreaDEvops/#code-splitting","text":"This section has moved here: https://facebook.github.io/create-react-app/docs/code-splitting","title":"Code Splitting"},{"location":"AreaDEvops/#analyzing-the-bundle-size","text":"This section has moved here: https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size","title":"Analyzing the Bundle Size"},{"location":"AreaDEvops/#making-a-progressive-web-app","text":"This section has moved here: https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app","title":"Making a Progressive Web App"},{"location":"AreaDEvops/#advanced-configuration","text":"This section has moved here: https://facebook.github.io/create-react-app/docs/advanced-configuration","title":"Advanced Configuration"},{"location":"AreaDEvops/#deployment","text":"This section has moved here: https://facebook.github.io/create-react-app/docs/deployment","title":"Deployment"},{"location":"AreaDEvops/#npm-run-build-fails-to-minify","text":"This section has moved here: https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify","title":"npm run build fails to minify"},{"location":"Readmefile/","text":"AREA Project overview: The project aims to create a software suite similar to IFTTT and/or Zapier, allowing users to interconnect various digital services. This software suite is divided into 3 parts: A Server: Implements features and exposes functionalities through a REST API. Web Client: Enables users to interact with the application via a web browser. Mobile Client: Allows users to access the application through a mobile device. Languages: This project uses the following languages: Server \u2192 Nodejs Express & MongoDB. Web application \u2192 React. Mobile application \u2192 React Native. Documentation: In the AREA_Documentation/ folder you can find these documents: User's guide \u2192 How to use the application. Technical documentation \u2192 Technical information about the project. Achievement: Mobile app: Web app: Services: Here are all the different services that you can use: Reddit GitHub Gitlab Gmail Discord OneDrive Youtube Made by: - Jean-David BAMENOU [jean-david.bamenou@epitech.euepitech] - Sedjro HOUNDONOUGBO [sedjro.houndonougbo@epitech.eu] - Togni AKPO [togni.akpo@epitech.eu] - Olouwachegoun BADOU [olouwachegoun.badou@epitech.eu] - Loick MIAN [loick.mian@epitech.eu] - Maria Gracia AHOMLANTO [maria-gracia.ahomlanto@epitech.eu]","title":"README"},{"location":"Readmefile/#area","text":"","title":"AREA"},{"location":"Readmefile/#project-overview","text":"The project aims to create a software suite similar to IFTTT and/or Zapier, allowing users to interconnect various digital services. This software suite is divided into 3 parts: A Server: Implements features and exposes functionalities through a REST API. Web Client: Enables users to interact with the application via a web browser. Mobile Client: Allows users to access the application through a mobile device.","title":"Project overview:"},{"location":"Readmefile/#languages","text":"This project uses the following languages: Server \u2192 Nodejs Express & MongoDB. Web application \u2192 React. Mobile application \u2192 React Native.","title":"Languages:"},{"location":"Readmefile/#documentation","text":"In the AREA_Documentation/ folder you can find these documents: User's guide \u2192 How to use the application. Technical documentation \u2192 Technical information about the project.","title":"Documentation:"},{"location":"Readmefile/#achievement","text":"","title":"Achievement:"},{"location":"Readmefile/#mobile-app","text":"","title":"Mobile app:"},{"location":"Readmefile/#web-app","text":"","title":"Web app:"},{"location":"Readmefile/#services","text":"Here are all the different services that you can use: Reddit GitHub Gitlab Gmail Discord OneDrive Youtube","title":"Services:"},{"location":"Readmefile/#made-by","text":"- Jean-David BAMENOU [jean-david.bamenou@epitech.euepitech] - Sedjro HOUNDONOUGBO [sedjro.houndonougbo@epitech.eu] - Togni AKPO [togni.akpo@epitech.eu] - Olouwachegoun BADOU [olouwachegoun.badou@epitech.eu] - Loick MIAN [loick.mian@epitech.eu] - Maria Gracia AHOMLANTO [maria-gracia.ahomlanto@epitech.eu]","title":"Made by:"},{"location":"technical/","text":"Project overview. The AREA project consists in the creation of a software suite that functions similarly to IFTTT and/or Zapier. This software suite is divided into 3 parts: A server to implement all the features. A web application to access the app from a browser. A mobile application to access the app from a phone. This project uses the following languages: Server \u2192 Nodejs Express & MongoDB. Web application \u2192 React. Mobile application \u2192 React Native. Libraries used. Mobile: For project configuration, various dependencies have been integrated to ensure optimal development setup. Here`s an overview of the key dependencies used in this context: Expo Configuration: @expo/webpack-config : Expo-specific Webpack configuration for projects. React Navigation: @react-navigation/native : Integration of navigation in the React Native application. @react-navigation/stack : Management of stack-based navigation. @react-navigation/bottom-tabs : Implementation of the bottom tab navigation. Axios: axios : HTTP library for making requests from the application. Expo: expo : Platform for developing reactive mobile applications. expo-splash-screen : Handling the splash screen for Expo applications. expo-status-bar : Reactive status bar for Expo applications. React: react : Version 18.2.0, the latest major version of the React library. react-dom : Version 18.2.0, used for React rendering on the web. React Native: react-native : Framework for developing reactive mobile applications. react-native-web : Version ~0.19.6, enabling the use of React Native on the web. This combined configuration reflects a seamless approach for cross-platform development, leveraging the latest features of React and React Native, and providing a consistent development experience across different platforms. Web: For the design of this application, a thoughtful selection of libraries and packages has been made. Here`s an overview of the main dependencies used in the project, with a focus on the latest major versions and key features: Styling Management: - @emotion/react : Version ^11.11.1, for styling management with a reactive approach. - @emotion/styled : Version ^11.11.0, providing styled components with Emotion. Icons and Fonts: - @fortawesome/fontawesome-free : Version ^6.5.1, for integrating icons from the Font Awesome library. - @mui/icons-material : Version ^5.15.0, providing icons for Material-UI components. - react-icons : Version ^4.12.0, offering a wide selection of React icons. UI Libraries: - @mui/material : Version ^5.15.0, for Material-UI components. - bootstrap : Version ^5.3.2, for responsive styles and UI components. - mdb-react-ui-kit : Version ^7.0.0, a React toolkit for UI development. Routing and Navigation: - react-router-dom : Version ^6.21.0, for handling navigation in the React application. Testing and Code Quality: - @testing-library/jest-dom : Version ^5.17.0, for Jest testing utilities. - @testing-library/react : Version ^13.4.0, for facilitating React testing. - @testing-library/user-event : Version ^13.5.0, for simulating user events in tests. Development Tools: - react-scripts : Version 5.0.1, for React script configuration and management. - web-vitals : Version ^2.1.4, for monitoring vital aspects of web performance. Other Dependencies: - @babel/plugin-proposal-private-property-in-object : Version ^7.18.6, for supporting ECMAScript syntax proposals. This combination of libraries aims to provide a strong foundation for application development, emphasizing reactivity, aesthetics, and ease of testing. The specified versions ensure project consistency and stability. Project structure. The project is organized into three directories, each containing the code for its respective part: Front, Mobile, and Server. The project is constructed using Docker, and this will be elaborated in a subsequent section of the document. Architecture diagram. Mobile: Web: APIs used. The project uses various APIs for its functionalities. We have: Reddit GitHub Gitlab Gmail Discord OneDrive Youtube Database structure. This project uses MongoDB as database manager. It is integrated using NodeJS and Express to manage the interactions between the front server and the API server. This database contains several models, such as User (including one model called Service), AREA (including two models Action and Reaction) and ConnectSession (used when the user connects to a service). Starting with the User model, the schema contains different fields such as : email : email address (type: String) password : encrypted password (type: String) displayName : username (type: String) connectData : data retrieved when user is connected to a service Next, The AREA model will store datas about the action (model Action) and the reaction (model Reaction) but also the user\u2019s id : - userId : user id (type: String) - isMobile : to know whether it is from mobile or not (type: Boolean) - action : information about the action (type: ActionSchema) - reaction : information about the reaction (type: ReactionSchema) ActionSchema is considered as the definition of an Action : - service : name of the service (type: String) - name : name of the action (type: String) - data : all the information of the action (type: Object) ReactionSchema is considered as the definition of a Reaction : - service : name of the service (type: String) - name : name of the reaction (type: String) - data : all the information of the reaction (type: Object) ConnectSession is the model we use to manage data when the user tries to connect to a service : - userId : user id (type: String) - endpoint : which endpoint the user is accessing (type: String) - isMobile : to know whether it is a mobile request or not (type: Boolean) - data : pass data through endpoints and callbacks (type: String) Project build. This project is constructed using Docker. The project architecture separates the back-end, web, and mobile servers, with each having its own Dockerfile, and a docker-compose.yml file located at the root. The docker-compose.yml file invokes the Dockerfiles in each source (/server/, /front/, & /mobile/) to build the entire project and launch the servers. It also starts mongod and binds it to port 27017, enabling the use of the database in the project. The Dockerfiles are responsible for building the three folders (server, front, & mobile) so that docker-compose.yml can initiate the complete build. The docker compose up command aggregates the output of each container, providing access to the following features: Front server : localhost:8081 Back server : localhost:8080 Mobile apk download : localhost:8080/client.apk Separate Servers: Back-end, web, and mobile servers are individually started. Database Access: Mongod is initiated and bound to port 27017, ensuring database access for the project. Complete Build: The command performs the full project build using the appropriate Dockerfiles. Combined Output: Results from each container are consolidated, offering an overview of the Docker project execution. Deployment Ease: Through docker-compose, the project can be consistently and efficiently deployed. In summary, leveraging Docker and docker-compose streamlines the process of building, deploying, and managing different components of the project, making development and maintenance more straightforward.","title":"Technicaldocs"},{"location":"technical/#project-overview","text":"The AREA project consists in the creation of a software suite that functions similarly to IFTTT and/or Zapier. This software suite is divided into 3 parts: A server to implement all the features. A web application to access the app from a browser. A mobile application to access the app from a phone. This project uses the following languages: Server \u2192 Nodejs Express & MongoDB. Web application \u2192 React. Mobile application \u2192 React Native.","title":"Project overview."},{"location":"technical/#libraries-used","text":"","title":"Libraries used."},{"location":"technical/#mobile","text":"For project configuration, various dependencies have been integrated to ensure optimal development setup. Here`s an overview of the key dependencies used in this context: Expo Configuration: @expo/webpack-config : Expo-specific Webpack configuration for projects. React Navigation: @react-navigation/native : Integration of navigation in the React Native application. @react-navigation/stack : Management of stack-based navigation. @react-navigation/bottom-tabs : Implementation of the bottom tab navigation. Axios: axios : HTTP library for making requests from the application. Expo: expo : Platform for developing reactive mobile applications. expo-splash-screen : Handling the splash screen for Expo applications. expo-status-bar : Reactive status bar for Expo applications. React: react : Version 18.2.0, the latest major version of the React library. react-dom : Version 18.2.0, used for React rendering on the web. React Native: react-native : Framework for developing reactive mobile applications. react-native-web : Version ~0.19.6, enabling the use of React Native on the web. This combined configuration reflects a seamless approach for cross-platform development, leveraging the latest features of React and React Native, and providing a consistent development experience across different platforms.","title":"Mobile:"},{"location":"technical/#web","text":"For the design of this application, a thoughtful selection of libraries and packages has been made. Here`s an overview of the main dependencies used in the project, with a focus on the latest major versions and key features: Styling Management: - @emotion/react : Version ^11.11.1, for styling management with a reactive approach. - @emotion/styled : Version ^11.11.0, providing styled components with Emotion. Icons and Fonts: - @fortawesome/fontawesome-free : Version ^6.5.1, for integrating icons from the Font Awesome library. - @mui/icons-material : Version ^5.15.0, providing icons for Material-UI components. - react-icons : Version ^4.12.0, offering a wide selection of React icons. UI Libraries: - @mui/material : Version ^5.15.0, for Material-UI components. - bootstrap : Version ^5.3.2, for responsive styles and UI components. - mdb-react-ui-kit : Version ^7.0.0, a React toolkit for UI development. Routing and Navigation: - react-router-dom : Version ^6.21.0, for handling navigation in the React application. Testing and Code Quality: - @testing-library/jest-dom : Version ^5.17.0, for Jest testing utilities. - @testing-library/react : Version ^13.4.0, for facilitating React testing. - @testing-library/user-event : Version ^13.5.0, for simulating user events in tests. Development Tools: - react-scripts : Version 5.0.1, for React script configuration and management. - web-vitals : Version ^2.1.4, for monitoring vital aspects of web performance. Other Dependencies: - @babel/plugin-proposal-private-property-in-object : Version ^7.18.6, for supporting ECMAScript syntax proposals. This combination of libraries aims to provide a strong foundation for application development, emphasizing reactivity, aesthetics, and ease of testing. The specified versions ensure project consistency and stability.","title":"Web:"},{"location":"technical/#project-structure","text":"The project is organized into three directories, each containing the code for its respective part: Front, Mobile, and Server. The project is constructed using Docker, and this will be elaborated in a subsequent section of the document.","title":"Project structure."},{"location":"technical/#architecture-diagram","text":"","title":"Architecture diagram."},{"location":"technical/#mobile_1","text":"","title":"Mobile:"},{"location":"technical/#web_1","text":"","title":"Web:"},{"location":"technical/#apis-used","text":"The project uses various APIs for its functionalities. We have: Reddit GitHub Gitlab Gmail Discord OneDrive Youtube","title":"APIs used."},{"location":"technical/#database-structure","text":"This project uses MongoDB as database manager. It is integrated using NodeJS and Express to manage the interactions between the front server and the API server. This database contains several models, such as User (including one model called Service), AREA (including two models Action and Reaction) and ConnectSession (used when the user connects to a service). Starting with the User model, the schema contains different fields such as : email : email address (type: String) password : encrypted password (type: String) displayName : username (type: String) connectData : data retrieved when user is connected to a service Next, The AREA model will store datas about the action (model Action) and the reaction (model Reaction) but also the user\u2019s id : - userId : user id (type: String) - isMobile : to know whether it is from mobile or not (type: Boolean) - action : information about the action (type: ActionSchema) - reaction : information about the reaction (type: ReactionSchema) ActionSchema is considered as the definition of an Action : - service : name of the service (type: String) - name : name of the action (type: String) - data : all the information of the action (type: Object) ReactionSchema is considered as the definition of a Reaction : - service : name of the service (type: String) - name : name of the reaction (type: String) - data : all the information of the reaction (type: Object) ConnectSession is the model we use to manage data when the user tries to connect to a service : - userId : user id (type: String) - endpoint : which endpoint the user is accessing (type: String) - isMobile : to know whether it is a mobile request or not (type: Boolean) - data : pass data through endpoints and callbacks (type: String)","title":"Database structure."},{"location":"technical/#project-build","text":"This project is constructed using Docker. The project architecture separates the back-end, web, and mobile servers, with each having its own Dockerfile, and a docker-compose.yml file located at the root. The docker-compose.yml file invokes the Dockerfiles in each source (/server/, /front/, & /mobile/) to build the entire project and launch the servers. It also starts mongod and binds it to port 27017, enabling the use of the database in the project. The Dockerfiles are responsible for building the three folders (server, front, & mobile) so that docker-compose.yml can initiate the complete build. The docker compose up command aggregates the output of each container, providing access to the following features: Front server : localhost:8081 Back server : localhost:8080 Mobile apk download : localhost:8080/client.apk Separate Servers: Back-end, web, and mobile servers are individually started. Database Access: Mongod is initiated and bound to port 27017, ensuring database access for the project. Complete Build: The command performs the full project build using the appropriate Dockerfiles. Combined Output: Results from each container are consolidated, offering an overview of the Docker project execution. Deployment Ease: Through docker-compose, the project can be consistently and efficiently deployed. In summary, leveraging Docker and docker-compose streamlines the process of building, deploying, and managing different components of the project, making development and maintenance more straightforward.","title":"Project build."},{"location":"userguide/","text":"Introduction The purpose of this document is to explain how to use the different functionalities of the AREA application. This guide is designed for both the web and the mobile version of the application. Through this document you will learn how to properly use AREA. Register & Login. Register to AREA. The user management module involves the registration process. Unidentified users register via an online mini-form, and the application server validates the account creation stage. To create your account, you need an email address and a password. The username is deducted from the e-mail address. This information can be modified later in the application. Login to AREA. Users can authenticate via a username/password. Application overview. Here are the different pages that you can find in AREA: Login page Registration page Actions/Reactions page Services page Actions/Reactions creation page Profile page AREA page This is an application page dedicated to displaying information about \"AREA\". Services page. This page focuses on the presentation and management of the services provided by the application. It contains details of the features available, as well as service offers related to the application's functionality. Create a new AREA. You can create an AREA from services. Each service has a list of predefined actions and reactions. predefined reactions. AREAs are therefore created by and there are many possible combinations. To do this, you need to select a trigger and then a reaction. Profile page. This page is about user profiles. Users can have individual profiles where they can view and manage their personal information, settings or preferences. Using the corresponding form, you can edit your personal information, this include: your username and your password. Edit an existing AREA. This action consists of modifying or updating the details of an existing AREA. Delete an existing AREA This action removes or deletes an existing domain from the system. This is an important operation, and users generally require appropriate authorization to perform this action to avoid accidental deletions. Service Subscription. Users subscribe to services from their services page. Triggers overview. Each service may offer Action components that activate triggers based on conditions. Examples include new messages, file additions, or time-based triggers. Reactions overview. Services may offer Reaction components, which perform specific tasks when triggered. Examples include posting messages, adding files, or sending messages. AREA: Action Reaction Execution After subscribing to services, users can create AREA to execute a Reaction when an Action is detected. Examples include triggering a Reaction when receiving an email with an attachment. Docker Compose Setup A docker-compose.yml file at the root of the project describes different Docker services. It includes: server: Launches the application server on port 8080. client_mobile: Builds the mobile client apk. client_web: Launches the web client on port 8081. The web client depends on both the mobile client and the server.","title":"Userguide"},{"location":"userguide/#introduction","text":"The purpose of this document is to explain how to use the different functionalities of the AREA application. This guide is designed for both the web and the mobile version of the application. Through this document you will learn how to properly use AREA.","title":"Introduction"},{"location":"userguide/#register-login","text":"","title":"Register &amp; Login."},{"location":"userguide/#register-to-area","text":"The user management module involves the registration process. Unidentified users register via an online mini-form, and the application server validates the account creation stage. To create your account, you need an email address and a password. The username is deducted from the e-mail address. This information can be modified later in the application.","title":"Register to AREA."},{"location":"userguide/#login-to-area","text":"Users can authenticate via a username/password.","title":"Login to AREA."},{"location":"userguide/#application-overview","text":"Here are the different pages that you can find in AREA: Login page Registration page Actions/Reactions page Services page Actions/Reactions creation page Profile page","title":"Application overview."},{"location":"userguide/#area-page","text":"This is an application page dedicated to displaying information about \"AREA\".","title":"AREA page"},{"location":"userguide/#services-page","text":"This page focuses on the presentation and management of the services provided by the application. It contains details of the features available, as well as service offers related to the application's functionality.","title":"Services page."},{"location":"userguide/#create-a-new-area","text":"You can create an AREA from services. Each service has a list of predefined actions and reactions. predefined reactions. AREAs are therefore created by and there are many possible combinations. To do this, you need to select a trigger and then a reaction.","title":"Create a new AREA."},{"location":"userguide/#profile-page","text":"This page is about user profiles. Users can have individual profiles where they can view and manage their personal information, settings or preferences. Using the corresponding form, you can edit your personal information, this include: your username and your password.","title":"Profile page."},{"location":"userguide/#edit-an-existing-area","text":"This action consists of modifying or updating the details of an existing AREA.","title":"Edit an existing AREA."},{"location":"userguide/#delete-an-existing-area","text":"This action removes or deletes an existing domain from the system. This is an important operation, and users generally require appropriate authorization to perform this action to avoid accidental deletions.","title":"Delete an existing AREA"},{"location":"userguide/#service-subscription","text":"Users subscribe to services from their services page.","title":"Service Subscription."},{"location":"userguide/#triggers-overview","text":"Each service may offer Action components that activate triggers based on conditions. Examples include new messages, file additions, or time-based triggers.","title":"Triggers overview."},{"location":"userguide/#reactions-overview","text":"Services may offer Reaction components, which perform specific tasks when triggered. Examples include posting messages, adding files, or sending messages.","title":"Reactions overview."},{"location":"userguide/#area-action-reaction-execution","text":"After subscribing to services, users can create AREA to execute a Reaction when an Action is detected. Examples include triggering a Reaction when receiving an email with an attachment.","title":"AREA: Action Reaction Execution"},{"location":"userguide/#docker-compose-setup","text":"A docker-compose.yml file at the root of the project describes different Docker services. It includes: server: Launches the application server on port 8080. client_mobile: Builds the mobile client apk. client_web: Launches the web client on port 8081. The web client depends on both the mobile client and the server.","title":"Docker Compose Setup"}]}